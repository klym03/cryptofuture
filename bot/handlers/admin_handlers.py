from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.utils.exceptions import MessageNotModified
import logging

from config import ADMIN_ID
from db import queries as db
from bot.keyboards.reply import (
    admin_main_keyboard, admin_users_keyboard, admin_referrals_keyboard,
    admin_referral_navigation_keyboard, admin_referral_detail_keyboard
)
from bot.states import AdminStates


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) == ADMIN_ID


# =============== –û–°–ù–û–í–ù–Ü –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò ===============

async def cmd_admin(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –≤—ñ–¥–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
        reply_markup=admin_main_keyboard
    )


async def callback_admin_main(callback: types.CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    try:
        await callback.message.edit_text(
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=admin_main_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


# =============== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò ===============

async def callback_admin_users(callback: types.CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Ä–æ–∑–¥—ñ–ª —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    try:
        await callback.message.edit_text(
            "üë§ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_users_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def callback_admin_grant_subscription(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –Ω–∞–¥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await AdminStates.waiting_for_grant_subscription_user.set()
    try:
        await callback.message.edit_text(
            "üíé <b>–ù–∞–¥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ @) –∞–±–æ user_id:",
            reply_markup=admin_users_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def process_grant_subscription(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    user_input = message.text.strip()
    target_user = None
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username –∞–±–æ user_id
    if user_input.isdigit():
        target_user = await db.get_user(int(user_input))
    else:
        target_user = await db.get_user_by_username(user_input)
    
    if not target_user:
        await message.answer(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.",
            reply_markup=admin_users_keyboard
        )
        await state.finish()
        return
    
    # –ù–∞–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
    await db.admin_grant_subscription(target_user['user_id'])
    
    username_display = f"@{target_user['username']}" if target_user['username'] else f"ID: {target_user['user_id']}"
    await message.answer(
        f"‚úÖ <b>–ü—ñ–¥–ø–∏—Å–∫—É –Ω–∞–¥–∞–Ω–æ!</b>\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username_display}\n"
        f"üìõ –Ü–º'—è: {target_user['first_name']}\n"
        f"üíé –ü—ñ–¥–ø–∏—Å–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω—ñ–≤",
        reply_markup=admin_users_keyboard
    )
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await message.bot.send_message(
            target_user['user_id'],
            "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
            "–í–∞–º –±—É–ª–æ –Ω–∞–¥–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω—ñ–≤!\n"
            "–¢–µ–ø–µ—Ä —É –≤–∞—Å —î –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∞–Ω–∞–ª—ñ–∑—É —É–≥–æ–¥."
        )
    except:
        pass  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞
    
    await state.finish()


async def callback_admin_grant_tries(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –Ω–∞–¥–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–ø—Ä–æ–±"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await AdminStates.waiting_for_grant_tries_user.set()
    try:
        await callback.message.edit_text(
            "üéÅ <b>–ù–∞–¥–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–ø—Ä–æ–±</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ @) –∞–±–æ user_id:",
            reply_markup=admin_users_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def process_grant_tries(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–ø—Ä–æ–±"""
    if not is_admin(message.from_user.id):
        return
    
    user_input = message.text.strip()
    target_user = None
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username –∞–±–æ user_id
    if user_input.isdigit():
        target_user = await db.get_user(int(user_input))
    else:
        target_user = await db.get_user_by_username(user_input)
    
    if not target_user:
        await message.answer(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.",
            reply_markup=admin_users_keyboard
        )
        await state.finish()
        return
    
    # –ù–∞–¥–∞—î–º–æ –æ–¥–Ω—É –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Å–ø—Ä–æ–±—É
    await db.admin_grant_free_tries(target_user['user_id'], 1)
    
    username_display = f"@{target_user['username']}" if target_user['username'] else f"ID: {target_user['user_id']}"
    await message.answer(
        f"‚úÖ <b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Å–ø—Ä–æ–±—É –Ω–∞–¥–∞–Ω–æ!</b>\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username_display}\n"
        f"üìõ –Ü–º'—è: {target_user['first_name']}\n"
        f"üéÅ –î–æ–¥–∞–Ω–æ: 1 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —Å–ø—Ä–æ–±–∞",
        reply_markup=admin_users_keyboard
    )
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await message.bot.send_message(
            target_user['user_id'],
            "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
            "–í–∞–º –±—É–ª–æ –Ω–∞–¥–∞–Ω–æ 1 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Å–ø—Ä–æ–±—É!\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–Ω–∞–ª—ñ–∑–æ–º —É–≥–æ–¥."
        )
    except:
        pass  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞
    
    await state.finish()


async def callback_admin_search_user(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await AdminStates.waiting_for_user_search.set()
    try:
        await callback.message.edit_text(
            "üîç <b>–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É username –∞–±–æ —ñ–º–µ–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=admin_users_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def process_user_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    query = message.text.strip()
    users = await db.search_users(query, limit=10)
    
    if not users:
        await message.answer(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.",
            reply_markup=admin_users_keyboard
        )
        await state.finish()
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    result_text = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:</b>\n\n"
    for user in users:
        username_display = f"@{user['username']}" if user['username'] else "–Ω–µ–º–∞—î"
        subscription_status = "üíé –ê–∫—Ç–∏–≤–Ω–∞" if user['is_subscribed'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        result_text += (
            f"üë§ <b>{user['first_name']}</b>\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üë§ Username: {username_display}\n"
            f"üíé –ü—ñ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
            f"üéÅ –°–ø—Ä–æ–±–∏: {user['free_trades_left']}\n\n"
        )
    
    await message.answer(result_text, reply_markup=admin_users_keyboard)
    await state.finish()


# =============== –†–ï–§–ï–†–ê–õ–¨–ù–Ü –ü–û–°–ò–õ–ê–ù–ù–Ø ===============

async def callback_admin_referrals(callback: types.CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Ä–æ–∑–¥—ñ–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    try:
        await callback.message.edit_text(
            "üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_referrals_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def callback_admin_create_referral(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await AdminStates.waiting_for_referral_name.set()
    try:
        await callback.message.edit_text(
            "‚ûï <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=admin_referrals_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def process_create_referral(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –µ—Ç–∞–ø 1: –Ω–∞–∑–≤–∞"""
    if not is_admin(message.from_user.id):
        return
    
    referral_name = message.text.strip()
    
    if len(referral_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞!\n\n"
            "–ú—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏.",
            reply_markup=admin_referrals_keyboard
        )
        await state.finish()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –≤ —Å—Ç–∞–Ω
    await state.update_data(referral_name=referral_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –≤–ª–∞—Å–Ω–∏–∫–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="ref_bind_user")],
        [InlineKeyboardButton(text="üåê –ó–≤–∏—á–∞–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="ref_no_bind")],
        [InlineKeyboardButton(text="üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_referrals")]
    ])
    
    await AdminStates.waiting_for_referral_owner.set()
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞:</b> {referral_name}\n\n"
        f"‚ùì <b>–¢–∏–ø –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n"
        f"–û–±–µ—Ä—ñ—Ç—å, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def callback_ref_bind_user(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await callback.message.edit_text(
        "üë§ <b>–ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ @) –∞–±–æ user_id:",
        parse_mode="HTML"
    )
    await callback.answer()


async def callback_ref_no_bind(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    referral_name = data.get('referral_name')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–±–µ–∑ owner_user_id)
    referral_code = await db.create_referral_link(callback.from_user.id, referral_name)
    bot_username = (await callback.bot.get_me()).username
    referral_url = f"https://t.me/{bot_username}?start={referral_code}"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–≤–∏—á–∞–π–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞: {referral_name}\n"
        f"üîó –ö–æ–¥: <code>{referral_code}</code>\n"
        f"üåê –ü–æ—Å–∏–ª–∞–Ω–Ω—è: <code>{referral_url}</code>\n\n"
        f"–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –ø–æ—à–∏—Ä—é–π—Ç–µ!",
        reply_markup=admin_referrals_keyboard,
        parse_mode="HTML"
    )
    await state.finish()
    await callback.answer()


async def process_referral_owner(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–ª–∞—Å–Ω–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(message.from_user.id):
        return
    
    user_input = message.text.strip()
    target_user = None
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username –∞–±–æ user_id
    if user_input.isdigit():
        target_user = await db.get_user(int(user_input))
    else:
        target_user = await db.get_user_by_username(user_input)
    
    if not target_user:
        await message.answer(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.",
            reply_markup=admin_referrals_keyboard
        )
        await state.finish()
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    referral_name = data.get('referral_name')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤'—è–∑–∞–Ω–µ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    referral_code = await db.create_referral_link(
        message.from_user.id, 
        referral_name,
        owner_user_id=target_user['user_id']
    )
    bot_username = (await message.bot.get_me()).username
    referral_url = f"https://t.me/{bot_username}?start={referral_code}"
    
    username_display = f"@{target_user['username']}" if target_user['username'] else f"ID: {target_user['user_id']}"
    
    await message.answer(
        f"‚úÖ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞: {referral_name}\n"
        f"üë§ –í–ª–∞—Å–Ω–∏–∫: {username_display} ({target_user['first_name']})\n"
        f"üîó –ö–æ–¥: <code>{referral_code}</code>\n"
        f"üåê –ü–æ—Å–∏–ª–∞–Ω–Ω—è: <code>{referral_url}</code>\n\n"
        f"üí° –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /my_referals",
        reply_markup=admin_referrals_keyboard
    )
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await message.bot.send_message(
            target_user['user_id'],
            f"üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
            f"–î–ª—è –≤–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!\n\n"
            f"üìù –ù–∞–∑–≤–∞: {referral_name}\n"
            f"üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: <code>{referral_url}</code>\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_referals –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
    except:
        pass  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞
    
    await state.finish()


async def callback_admin_list_referrals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    links = await db.get_admin_referral_links(callback.from_user.id)
    
    if not links:
        try:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å</b>\n\n"
                "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å.\n"
                "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!",
                reply_markup=admin_referrals_keyboard
            )
        except MessageNotModified:
            pass
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
    keyboard = admin_referral_navigation_keyboard(links, page=0)
    try:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å</b>\n\n"
            f"–í—Å—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω—å: {len(links)}\n"
            "üü¢ - –∞–∫—Ç–∏–≤–Ω–µ, üî¥ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ\n"
            "üë• - —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, üíé - –ø—ñ–¥–ø–∏—Å–∫–∏",
            reply_markup=keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def callback_admin_referral_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∑ callback_data
    referral_code = callback.data.split("_")[-1]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    link = await db.get_referral_link(referral_code)
    if not link:
        await callback.answer("‚ùå –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    bot_username = (await callback.bot.get_me()).username
    referral_url = f"https://t.me/{bot_username}?start={referral_code}"
    
    status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–µ" if link['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–µ"
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    links = await db.get_admin_referral_links(callback.from_user.id)
    current_link = next((l for l in links if l['code'] == referral_code), None)
    
    if current_link:
        registrations = current_link['registrations']
        subscriptions = current_link['subscriptions']
    else:
        registrations = subscriptions = 0
    
    try:
        await callback.message.edit_text(
            f"üîó <b>–î–µ—Ç–∞–ª—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞: {link['name']}\n"
            f"üîó –ö–æ–¥: <code>{referral_code}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üë• –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {registrations}\n"
            f"üíé –ü—ñ–¥–ø–∏—Å–∫–∏: {subscriptions}\n"
            f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {link['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üåê –ü–æ—Å–∏–ª–∞–Ω–Ω—è:\n<code>{referral_url}</code>",
            reply_markup=admin_referral_detail_keyboard(referral_code, link['is_active'])
        )
    except MessageNotModified:
        pass
    await callback.answer()


async def callback_admin_toggle_referral(callback: types.CallbackQuery):
    """–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    referral_code = callback.data.split("_")[-1]
    await db.toggle_referral_link_status(referral_code, callback.from_user.id)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    await callback_admin_referral_detail(callback)


async def callback_admin_copy_referral(callback: types.CallbackQuery):
    """–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    referral_code = callback.data.split("_")[-1]
    bot_username = (await callback.bot.get_me()).username
    referral_url = f"https://t.me/{bot_username}?start={referral_code}"
    
    await callback.answer(f"üìã –ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ:\n{referral_url}", show_alert=True)


async def callback_admin_referral_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    stats = await db.get_referral_stats_summary(callback.from_user.id)
    
    try:
        await callback.message.edit_text(
            f"üìà <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üîó –í—Å—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω—å: {stats['total_links']}\n"
            f"üë• –í—Å—å–æ–≥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π: {stats['total_registrations']}\n"
            f"üíé –í—Å—å–æ–≥–æ –ø—ñ–¥–ø–∏—Å–æ–∫: {stats['total_subscriptions']}\n\n"
            f"üìä –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ –ø—ñ–¥–ø–∏—Å–∫—É: "
            f"{(stats['total_subscriptions'] / max(stats['total_registrations'], 1) * 100):.1f}%",
            reply_markup=admin_referrals_keyboard
        )
    except MessageNotModified:
        pass
    await callback.answer()


# =============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===============

async def callback_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_bot_stats()
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Å—ñ—é
        conversion_rate = 0
        if stats['total_referral_clicks'] > 0:
            conversion_rate = (stats['referral_subscriptions'] / stats['total_referral_clicks']) * 100
        
        await callback.message.edit_text(
            f"üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {stats['total_users']}\n"
            f"‚Ä¢ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: {stats['recent_users']}\n\n"
            f"üíé <b>–ü—ñ–¥–ø–∏—Å–∫–∏:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ: {stats['active_subscriptions']}\n"
            f"‚Ä¢ –ß–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∏: {stats['referral_subscriptions']}\n\n"
            f"üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω—å: {stats['total_referral_links']}\n"
            f"‚Ä¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {stats['total_referral_clicks']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: {conversion_rate:.1f}%\n\n"
            f"üìà <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ü—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {(stats['active_subscriptions'] / max(stats['total_users'], 1) * 100):.1f}%",
            reply_markup=admin_main_keyboard
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            reply_markup=admin_main_keyboard
        )
    
    await callback.answer()


# =============== –°–¢–ê–†–Ü –ö–û–ú–ê–ù–î–ò (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ===============

async def cmd_test_payment(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    user_id = message.from_user.id
    await db.activate_subscription(user_id)
    
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ 30 –¥–Ω—ñ–≤.")


async def cmd_reset_subscription(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    user_id = message.from_user.id
    await db.update_subscription_status(user_id, False)
    
    await message.answer("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")


# =============== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í ===============

def register_admin_handlers(dp):
    # –ö–æ–º–∞–Ω–¥–∏
    dp.register_message_handler(cmd_admin, Command("admin"))
    dp.register_message_handler(cmd_test_payment, Command("test_payment"))
    dp.register_message_handler(cmd_reset_subscription, Command("reset_subscription")) 
    
    # Callback –∫–Ω–æ–ø–∫–∏ - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    dp.register_callback_query_handler(callback_admin_main, Text("admin_main"))
    dp.register_callback_query_handler(callback_admin_users, Text("admin_users"))
    dp.register_callback_query_handler(callback_admin_referrals, Text("admin_referrals"))
    dp.register_callback_query_handler(callback_admin_stats, Text("admin_stats"))
    
    # Callback –∫–Ω–æ–ø–∫–∏ - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    dp.register_callback_query_handler(callback_admin_grant_subscription, Text("admin_grant_subscription"))
    dp.register_callback_query_handler(callback_admin_grant_tries, Text("admin_grant_tries"))
    dp.register_callback_query_handler(callback_admin_search_user, Text("admin_search_user"))
    
    # Callback –∫–Ω–æ–ø–∫–∏ - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    dp.register_callback_query_handler(callback_admin_create_referral, Text("admin_create_referral"))
    dp.register_callback_query_handler(callback_admin_list_referrals, Text("admin_list_referrals"))
    dp.register_callback_query_handler(callback_admin_referral_stats, Text("admin_referral_stats"))
    dp.register_callback_query_handler(callback_admin_referral_detail, Text(startswith="admin_referral_detail_"))
    dp.register_callback_query_handler(callback_admin_toggle_referral, Text(startswith="admin_toggle_referral_"))
    dp.register_callback_query_handler(callback_admin_copy_referral, Text(startswith="admin_copy_referral_"))
    
    # Callback –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
    dp.register_callback_query_handler(callback_ref_bind_user, Text("ref_bind_user"), state=AdminStates.waiting_for_referral_owner)
    dp.register_callback_query_handler(callback_ref_no_bind, Text("ref_no_bind"), state=AdminStates.waiting_for_referral_owner)
    
    # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤
    dp.register_message_handler(process_grant_subscription, state=AdminStates.waiting_for_grant_subscription_user)
    dp.register_message_handler(process_grant_tries, state=AdminStates.waiting_for_grant_tries_user)
    dp.register_message_handler(process_user_search, state=AdminStates.waiting_for_user_search)
    dp.register_message_handler(process_create_referral, state=AdminStates.waiting_for_referral_name)
    dp.register_message_handler(process_referral_owner, state=AdminStates.waiting_for_referral_owner) 
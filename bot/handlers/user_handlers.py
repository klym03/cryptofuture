from aiogram import Dispatcher, types
from db import queries as db
from bot.keyboards.reply import main_menu_keyboard, subscribe_keyboard
from datetime import datetime, timezone
from typing import Union


async def get_profile_data(user_id: int):
    """–ì–æ—Ç—É—î —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    user = await db.get_user(user_id)
    if not user:
        return "–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.", None

    current_time = datetime.now(timezone.utc)
    is_subscribed = user["is_subscribed"]
    subscription_expires_at = user["subscription_expires_at"]

    # –Ø–∫—â–æ –∑ –±–∞–∑–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏, —Ä–æ–±–∏–º–æ —ó—ó aware (UTC)
    if subscription_expires_at and subscription_expires_at.tzinfo is None:
        subscription_expires_at = subscription_expires_at.replace(tzinfo=timezone.utc)

    if is_subscribed and subscription_expires_at and subscription_expires_at < current_time:
        is_subscribed = False
        await db.update_subscription_status(user["user_id"], False)

    if is_subscribed and subscription_expires_at:
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        expires_text = f"<b>–î—ñ—î –¥–æ:</b> {subscription_expires_at.strftime('%d.%m.%Y %H:%M')} UTC"
    else:
        subscription_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        expires_text = ""

    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
    profile_text += f"<b>ID:</b> <code>{user['user_id']}</code>\n"
    profile_text += f"<b>–Ü–º'—è:</b> {user['first_name']}\n"
    if user['username']:
        profile_text += f"<b>Username:</b> @{user['username']}\n"
    profile_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    profile_text += f"<b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —É–≥–æ–¥:</b> {user['free_trades_left']}\n"
    profile_text += f"<b>–ü—ñ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
    if expires_text:
        profile_text += f"{expires_text}\n"

    if is_subscribed:
        profile_text += f"\nüéØ <b>–í–∞—à—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>\n"
        profile_text += f"‚ñ´Ô∏è –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–∞–ª—ñ–∑—ñ–≤\n"
        profile_text += f"‚ñ´Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
        profile_text += f"‚ñ´Ô∏è –†—ñ–≤–Ω—ñ –≤—Ö–æ–¥—É, —Å—Ç–æ–ø-–ª–æ—Å—Å —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç\n"
        profile_text += f"‚ñ´Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –ø–ª–µ—á—É\n"
    else:
        profile_text += f"\nüí° <b>–î–æ—Å—Ç—É–ø–Ω–æ –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é:</b>\n"
        profile_text += f"‚ñ´Ô∏è –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–∞–ª—ñ–∑—ñ–≤\n"
        profile_text += f"‚ñ´Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
        profile_text += f"‚ñ´Ô∏è –†—ñ–≤–Ω—ñ –≤—Ö–æ–¥—É, —Å—Ç–æ–ø-–ª–æ—Å—Å —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç\n"
        profile_text += f"‚ñ´Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –ø–ª–µ—á—É\n"

    keyboard = subscribe_keyboard if not is_subscribed else None
    return profile_text, keyboard


async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—ñ /start
    referral_code = None
    if message.get_args():
        potential_code = message.get_args().strip()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
        referral_link = await db.get_referral_link(potential_code)
        if referral_link:
            referral_code = potential_code
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ –ø–µ—Ä–µ—Ö—ñ–¥
            await db.add_referral_stat(referral_code, user_id, 'click')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    existing_user = await db.get_user(user_id)
    
    if not existing_user:
        # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –¥–æ–¥–∞—î–º–æ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º (—è–∫—â–æ —î)
        await db.add_user(user_id, username, first_name, referral_code)
        
        # –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é, –¥–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        if referral_code:
            await db.add_referral_stat(referral_code, user_id, 'register')
    else:
        # –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        await db.add_user(user_id, username, first_name)

    # –§–æ—Ä–º—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome_text = f"üëã –ü—Ä–∏–≤—ñ—Ç, {first_name}!\n\n"
    
    if not existing_user and referral_code:
        # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–π—à–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é
        welcome_text += "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n"
    
    welcome_text += (
        "–Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —É–≥–æ–¥. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫–∞, —ñ —è –Ω–∞–¥–∞–º —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ç–æ—Ä–≥–æ–≤—É —ñ–¥–µ—é.\n\n"
        "–£ –≤–∞—Å —î <b>1 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —Å–ø—Ä–æ–±–∞</b>, —â–æ–± –æ—Ü—ñ–Ω–∏—Ç–∏ –º–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ."
    )

    await message.answer(
        welcome_text,
        reply_markup=main_menu_keyboard,
        parse_mode="HTML",
    )


async def show_profile(message_or_callback: Union[types.Message, types.CallbackQuery]):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ä–µ–¥–∞–≥—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ü–µ callback."""
    user_id = message_or_callback.from_user.id
    profile_text, keyboard = await get_profile_data(user_id)

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(
            profile_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    elif isinstance(message_or_callback, types.CallbackQuery):
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ message –∑ callback, —â–æ–± –∑–Ω–∞—Ç–∏, —è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
        await message_or_callback.message.edit_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await message_or_callback.answer()


async def cmd_profile(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ '–ü—Ä–æ—Ñ—ñ–ª—å'"""
    await show_profile(message)


async def cmd_trade(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ '–î–æ–ø–æ–º–æ–≥–∞ –∑ —É–≥–æ–¥–æ—é'"""
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ —É–≥–æ–¥–æ—é.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∞–±–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≥—Ä–∞—Ñ—ñ–∫—É. "
        "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ:\n"
        "- –ù–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏\n"
        "- –¢–∞–π–º—Ñ—Ä–µ–π–º\n"
        "- –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏, —è–∫—ñ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ (—è–∫—â–æ —î)\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é –≥—Ä–∞—Ñ—ñ–∫ —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —É–≥–æ–¥–∏."
    )


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_message_handler(cmd_profile, text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å")
    dp.register_message_handler(cmd_trade, text="üí° –î–æ–ø–æ–º–æ–≥–∞ –∑ —É–≥–æ–¥–æ—é") 
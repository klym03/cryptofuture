import base64
import io
import logging
import os
from aiogram import Dispatcher, types
from db import queries as db
from bot.ai import get_trade_recommendation
from bot.keyboards.reply import subscribe_keyboard
from datetime import datetime, timezone


async def handle_photo(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.
    """
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if not user:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start, —â–æ–± —è –º—ñ–≥ –≤–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –ø—ñ–¥–ø–∏—Å–∫–∏
    subscription_expires_at = user["subscription_expires_at"]
    if subscription_expires_at and subscription_expires_at.tzinfo is None:
        subscription_expires_at = subscription_expires_at.replace(tzinfo=timezone.utc)

    if user["is_subscribed"] and subscription_expires_at < datetime.now(timezone.utc):
        # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ
        await message.answer(
            "–¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–Ω–æ–≤—ñ—Ç—å —ó—ó, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.",
            reply_markup=subscribe_keyboard
        )
        return

    # –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É
    if not user["is_subscribed"] and user["free_trades_left"] <= 0:
        await message.answer(
            "–ù–∞ –∂–∞–ª—å, –≤–∞—à—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. "
            "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.",
            reply_markup=subscribe_keyboard
        )
        return

    processing_message = await message.answer("üîÑ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –≥—Ä–∞—Ñ—ñ–∫... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.")

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä
        file_info = await message.bot.get_file(photo.file_id)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –≤ –ø–∞–º'—è—Ç—å
        photo_bytes = io.BytesIO()
        await message.bot.download_file(file_info.file_path, photo_bytes)
        photo_bytes.seek(0)
        
        # –ö–æ–¥—É—î–º–æ –≤ base64
        base64_image = base64.b64encode(photo_bytes.read()).decode('utf-8')
        mime_type = "image/jpeg"

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥ AI
        analysis_text = await get_trade_recommendation(base64_image, mime_type)
        
        # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –ø—Ä–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–ª–æ–º
        capital_management = (
            "\n\n"
            "üí∞ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–ª–æ–º:</b>\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ —É–≥–æ–¥—É –∑ <b>–Ω–µ –±—ñ–ª—å—à–µ 10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É</b>. "
            "–¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤ –≥—Ä—ñ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ —Å–µ—Ä—ñ—ó –Ω–µ–≤–¥–∞–ª–∏—Ö —É–≥–æ–¥ —ñ —É–±–µ–∑–ø–µ—á–∏—Ç—å –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç –≤—ñ–¥ –∑–Ω–∞—á–Ω–∏—Ö –≤—Ç—Ä–∞—Ç."
        )
        analysis_text += capital_management

        # –°–ø–∏—Å—É—î–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Å–ø—Ä–æ–±—É, —è–∫—â–æ —Ü–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫
        if not user["is_subscribed"]:
            await db.use_free_trade(user_id)
            
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –æ–±—Ä–æ–±–∫–æ—é HTML –ø–æ–º–∏–ª–æ–∫
        try:
            await message.answer(analysis_text, parse_mode="HTML")
        except Exception as html_error:
            # –Ø–∫—â–æ HTML –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ HTML —Ç–µ–≥–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {html_error}")
            try:
                from bot.ai import remove_all_html_tags
                clean_text = remove_all_html_tags(analysis_text)
                await message.answer(
                    "üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É</b> (—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ—â–µ–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è):\n\n" + clean_text,
                    parse_mode="HTML"
                )
            except Exception:
                # –Ø–∫—â–æ –π —Ü–µ –Ω–µ –ø—Ä–∞—Ü—é—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–≤—Å—ñ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                await message.answer(
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è):\n\n" + analysis_text
                )

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —É–≥–æ–¥–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user['user_id']}: {e}")
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        await processing_message.delete()


def register_trade_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–æ—Ä–≥–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤."""
    dp.register_message_handler(handle_photo, content_types=["photo"]) 
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from db import queries as db
import logging
from datetime import datetime, timedelta
from bot.handlers.user_handlers import show_profile

# –¶—ñ–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ Telegram Stars
PRICE = types.LabeledPrice(label="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤", amount=250)  # –¶—ñ–Ω–∞ –≤ XTR

async def handle_subscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Telegram Stars
        await callback_query.bot.send_invoice(
            chat_id=user_id,
            title="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ AI –∞–Ω–∞–ª—ñ–∑ —É–≥–æ–¥",
            description="–û—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ AI –∞–Ω–∞–ª—ñ–∑—É —Ç–æ—Ä–≥–æ–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ 30 –¥–Ω—ñ–≤",
            payload=f"subscription_{user_id}",
            provider_token="",  # –ü–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è Telegram Stars
            currency="XTR",  # Telegram Stars
            prices=[PRICE],
            start_parameter="subscribe",
        )
        
        await callback_query.answer("–Ü–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–ø–ª–∞—Ç–∏—Ç–∏', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.", show_alert=True)
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

async def handle_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ—é"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –ø–ª–∞—Ç–µ–∂—É
        if pre_checkout_query.invoice_payload.startswith("subscription_"):
            await pre_checkout_query.bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=True
            )
        else:
            await pre_checkout_query.bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂—É"
            )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ pre-checkout: {e}")
        await pre_checkout_query.bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É"
        )

async def handle_successful_payment(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"""
    user_id = message.from_user.id
    payment = message.successful_payment
    
    try:
        # –ê–∫—Ç–∏–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω—ñ–≤
        await db.activate_subscription(user_id, days=30)
        
        logging.info(f"–ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        await message.answer(
            "üéâ <b>–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!</b>\n\n"
            "‚úÖ –¢–µ–ø–µ—Ä —É –≤–∞—Å —î –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ AI –∞–Ω–∞–ª—ñ–∑—É —Ç–æ—Ä–≥–æ–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ 30 –¥–Ω—ñ–≤.\n\n"
            "üìä –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —ñ –æ—Ç—Ä–∏–º—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑!",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {payment.telegram_payment_charge_id}"
        )

async def handle_subscription_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É"""
    try:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")
        )
        
        info_text = (
            "üí´ <b>–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ AI –∞–Ω–∞–ª—ñ–∑ —É–≥–æ–¥</b>\n\n"
            "üìä <b>–©–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n"
            "‚Ä¢ –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤\n"
            "‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏\n"
            "‚Ä¢ –†—ñ–≤–Ω—ñ –≤—Ö–æ–¥—É, —Å—Ç–æ–ø-–ª–æ—Å—Å —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –ø–ª–µ—á—É\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–µ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏\n\n"
            "üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> 250 Telegram Stars\n"
            "‚è∞ <b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> 30 –¥–Ω—ñ–≤\n\n"
            "üîÑ <b>–ü–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–µ –ø–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è\n"
            "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> –ß–µ—Ä–µ–∑ Telegram Stars"
        )
        
        try:
            await callback_query.message.edit_text(
                info_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception:
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback_query.message.answer(
                info_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", show_alert=True)

async def handle_back_to_profile(callback_query: types.CallbackQuery):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
    await show_profile(callback_query)

def register_payment_handlers(dp):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤"""
    dp.register_callback_query_handler(handle_subscribe, text="subscribe_30_days")
    dp.register_callback_query_handler(handle_subscription_info, text="subscription_info")
    dp.register_callback_query_handler(handle_back_to_profile, text="back_to_profile")
    dp.register_pre_checkout_query_handler(handle_pre_checkout_query)
    dp.register_message_handler(handle_successful_payment, content_types=types.ContentType.SUCCESSFUL_PAYMENT) 